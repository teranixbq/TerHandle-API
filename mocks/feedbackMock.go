// Code generated by MockGen. DO NOT EDIT.
// Source: terhandle/internal/features/feedback/entity (interfaces: FeedbackRepositoryInterface)

// Package test is a generated GoMock package.
package test

import (
	reflect "reflect"
	entity "terhandle/internal/features/feedback/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockFeedbackRepositoryInterface is a mock of FeedbackRepositoryInterface interface.
type MockFeedbackRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFeedbackRepositoryInterfaceMockRecorder
}

// MockFeedbackRepositoryInterfaceMockRecorder is the mock recorder for MockFeedbackRepositoryInterface.
type MockFeedbackRepositoryInterfaceMockRecorder struct {
	mock *MockFeedbackRepositoryInterface
}

// NewMockFeedbackRepositoryInterface creates a new mock instance.
func NewMockFeedbackRepositoryInterface(ctrl *gomock.Controller) *MockFeedbackRepositoryInterface {
	mock := &MockFeedbackRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockFeedbackRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedbackRepositoryInterface) EXPECT() *MockFeedbackRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockFeedbackRepositoryInterface) Insert(arg0, arg1 uint, arg2 entity.CoreFeedback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockFeedbackRepositoryInterfaceMockRecorder) Insert(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockFeedbackRepositoryInterface)(nil).Insert), arg0, arg1, arg2)
}

// SelectByIdAndIdUser mocks base method.
func (m *MockFeedbackRepositoryInterface) SelectByIdAndIdUser(arg0, arg1, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByIdAndIdUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectByIdAndIdUser indicates an expected call of SelectByIdAndIdUser.
func (mr *MockFeedbackRepositoryInterfaceMockRecorder) SelectByIdAndIdUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByIdAndIdUser", reflect.TypeOf((*MockFeedbackRepositoryInterface)(nil).SelectByIdAndIdUser), arg0, arg1, arg2)
}

// SelectByIdAndRole mocks base method.
func (m *MockFeedbackRepositoryInterface) SelectByIdAndRole(arg0, arg1 uint, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByIdAndRole", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectByIdAndRole indicates an expected call of SelectByIdAndRole.
func (mr *MockFeedbackRepositoryInterfaceMockRecorder) SelectByIdAndRole(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByIdAndRole", reflect.TypeOf((*MockFeedbackRepositoryInterface)(nil).SelectByIdAndRole), arg0, arg1, arg2, arg3)
}

// UpdateFeedback mocks base method.
func (m *MockFeedbackRepositoryInterface) UpdateFeedback(arg0, arg1, arg2 uint, arg3 entity.CoreFeedback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeedback", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFeedback indicates an expected call of UpdateFeedback.
func (mr *MockFeedbackRepositoryInterfaceMockRecorder) UpdateFeedback(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeedback", reflect.TypeOf((*MockFeedbackRepositoryInterface)(nil).UpdateFeedback), arg0, arg1, arg2, arg3)
}
